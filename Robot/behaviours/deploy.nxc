// Deploy mechanism function

sub deploy(int &motor_array[], bool &cross_event, int &deploy_action, bool &deploy_complete)
{
  switch (deploy_action) {
    case INITIAL: // IDLE STATE
      // DO nothing
      break;
    case STATE1: // Deploy
      switch(deploy_state)
      {
        case 0: // WAIT FOR CROSS EVENT
          if(cross_event){
            cross_event = 0;
            deploy_state = 1;
            motor_ramp = SPEED + 20;
          }
          break;
        case 1: // GO BACKWARDS
          {
            if(motor_ramp == 30){
              deploy_state = 2;
              cross_event = false;
            }
            else{
              if(motor_ramp > SPEED){
                motor_array[LEFT] = -SPEED;
                motor_array[RIGHT] = -SPEED;
              }
              else{
                motor_array[LEFT] = -motor_ramp;
                motor_array[RIGHT] = -motor_ramp;
              }

              motor_ramp -= 1;
            }
          }
          break;
        case 2: // Wait for first cross
          if(cross_event == true){
            deploy_state = 3;
            cross_event = false;
          }
          else{
            motor_array[LEFT] = -TURN_SPEED;
            motor_array[RIGHT] = TURN_SPEED;
          }
          break;
        case 3: // Wait for line
          int difference = abs((Sensor(LEFT_LIGHT) + 7) - Sensor(RIGHT_LIGHT));
          if(difference > 10){
            deploy_state = 4;
          }
          else{
            motor_array[LEFT] = -TURN_SPEED/2;
            motor_array[RIGHT] = TURN_SPEED/2;
          }
          break;
        case 4: // Go to intersection
          if(Sensor(LEFT_LIGHT) < 50 && Sensor(RIGHT_LIGHT) < 50){
            deploy_state = 0;
            deploy_complete = true;
            deploy_action = INITIAL;
          }
          break;
      }
      break;
  }
}
