// Deploy mechanism function

//SPEED 2.0
sub deploy(int &motor_array[], bool &cross_event, int &deploy_action, bool &deploy_complete)
{
  switch (deploy_action) {
    case INITIAL: // IDLE STATE
      // DO nothing
      break;
    case STATE1: // Deploy
      switch(deploy_state)
      {
        case 0: // WAIT FOR CROSS EVENT
          if(cross_event){
            cross_event = 0;
            deploy_state = 1;
            timer = CurrentTick();
          }
          break;
        case 1: // GO BACKWARDS UNTILL CROSS
          {
            current_timer = CurrentTick();
            float difference = current_timer - timer;
            if(difference > 470){
              deploy_state = 2;
              cross_event = false;
            }
            else{
              motor_array[LEFT] = -SPEED;
              motor_array[RIGHT] = -SPEED;
            }
          }
          break;
        case 2: // Wait for first cross
          if(StrIndex(plan, pos + 1) != 0){
            char next_event = StrIndex(plan, pos + 1);
            if(next_event == 'F'){
              temp_state = 1;
              deploy_state = 3;
              cross_event = false;
            }
            else if(next_event == 'L'){
              deploy_state = 4;
              cross_event = false;
              timer = CurrentTick();
            }
            else if(next_event == 'R'){
              deploy_state = 5;
              cross_event = false;
              timer = CurrentTick();
            }
         }
         else{
            motor_array[LEFT] = 0;
            motor_array[RIGHT] = 0;
         }
          break;
        case 3: // FORWARDS
          switch(temp_state){
            case 1:
              if(cross_event){
                temp_state = 2;
                cross_event = false;
              }
              else{
                motor_array[RIGHT] = TURN_SPEED;
                motor_array[LEFT] = -TURN_SPEED;
              }
              break;
            case 2:
              if(cross_event){
                temp_state = 3;
                cross_event = false;
              }
              else{
                motor_array[RIGHT] = TURN_SPEED;
                motor_array[LEFT] = -TURN_SPEED;
              }
            case 3:
              int difference = abs((Sensor(LEFT_LIGHT) + 7) - Sensor(RIGHT_LIGHT));
              if(difference > 10){
                deploy_state = 0;
                deploy_complete = true;
                deploy_action = INITIAL;
              }
          }
          break;
        case 4: // RIGHT
          {
          current_timer = CurrentTick();
          float difference = current_timer - timer;
          if(difference > 250){
            deploy_state = 6;
            plan = StrReplace(plan, pos + 1, "F");
          }
          else{
            motor_array[LEFT] = SPEED;
            motor_array[RIGHT] = -SPEED;
          }
          }
          break;
        case 5: // LEFT_LIGHT
          {
          current_timer = CurrentTick();
          float difference = current_timer - timer;
          if(difference > 250){
            deploy_state = 6;
            plan = StrReplace(plan, pos + 1, "F");
          }
          else{
            motor_array[LEFT] = -SPEED;
            motor_array[RIGHT] = SPEED;
          }
          }
          break;
        case 6:
          //motor_array[LEFT] = 0;
          //motor_array[RIGHT] = 0;

          deploy_state = 0;
          deploy_complete = true;
          deploy_action = INITIAL;
      }
      break;
  }
}

//SPEED
/*sub deploy(int &motor_array[], bool &cross_event, int &deploy_action, bool &deploy_complete)
{
  switch (deploy_action) {
    case INITIAL: // IDLE STATE
      // DO nothing
      break;
    case STATE1: // Deploy
      switch(deploy_state)
      {
        case 0: // WAIT FOR CROSS EVENT
          if(cross_event){
            cross_event = 0;
            deploy_state = 1;
            motor_ramp = SPEED + 15;
          }
          break;
        case 1: // GO BACKWARDS AND WAIT FOR CROSS
          {
            if(motor_ramp == 50){
              deploy_state = 2;
              cross_event = false;
            }
            else{
              if(motor_ramp > SPEED){
                motor_array[LEFT] = -SPEED;
                motor_array[RIGHT] = -SPEED;
              }
              else{
                motor_array[LEFT] = -motor_ramp;
                motor_array[RIGHT] = -motor_ramp;
              }

              motor_ramp -= 1;
            }
          }
          break;
        case 2: // Wait for first cross
          if(cross_event == true){
            deploy_state = 3;
            cross_event = false;
          }
          else{
            motor_array[LEFT] = -TURN_SPEED;
            motor_array[RIGHT] = TURN_SPEED;
          }
          break;
        case 3: // Wait for line
          int difference = abs((Sensor(LEFT_LIGHT) + 7) - Sensor(RIGHT_LIGHT));
          if(difference > 10){
            deploy_state = 4;
          }
          else{
            motor_array[LEFT] = -TURN_SPEED/2;
            motor_array[RIGHT] = TURN_SPEED/2;
          }
          break;
        case 4: // Go to intersection
          if(Sensor(LEFT_LIGHT) < 50 && Sensor(RIGHT_LIGHT) < 50){
            deploy_state = 0;
            deploy_complete = true;
            deploy_action = INITIAL;
          }
          else{
            motor_array[LEFT] = motor_array[LEFT] - 55;
            motor_array[RIGHT] = motor_array[RIGHT] - 55;
          }
          break;
      }
      break;
  }
}*/

// SLOW AND STEADY
/*sub deploy(int &motor_array[], bool &cross_event, int &deploy_action, bool &deploy_complete)
{
  switch (deploy_action) {
    case INITIAL: // IDLE STATE
      // DO nothing
      break;
    case STATE1: // Deploy
      switch(deploy_state)
      {
        case 0: // WAIT FOR CROSS EVENT
          if(cross_event){
            cross_event = 0;
            deploy_state = 1;
            motor_ramp = SPEED + 20;
          }
          break;
        case 1: // GO BACKWARDS AND WAIT FOR CROSS
          {
            if(motor_ramp == 30){
              deploy_state = 2;
              cross_event = false;
            }
            else{
              if(motor_ramp > SPEED){
                motor_array[LEFT] = -SPEED;
                motor_array[RIGHT] = -SPEED;
              }
              else{
                motor_array[LEFT] = -motor_ramp;
                motor_array[RIGHT] = -motor_ramp;
              }

              motor_ramp -= 1;
            }
          }
          break;
        case 2: // Wait for first cross
          if(cross_event == true){
            deploy_state = 3;
            cross_event = false;
          }
          else{
            motor_array[LEFT] = -TURN_SPEED;
            motor_array[RIGHT] = TURN_SPEED;
          }
          break;
        case 3: // Wait for line
          int difference = abs((Sensor(LEFT_LIGHT) + 7) - Sensor(RIGHT_LIGHT));
          if(difference > 10){
            deploy_state = 4;
          }
          else{
            motor_array[LEFT] = -TURN_SPEED/2;
            motor_array[RIGHT] = TURN_SPEED/2;
          }
          break;
        case 4: // Go to intersection
          if(Sensor(LEFT_LIGHT) < 50 && Sensor(RIGHT_LIGHT) < 50){
            deploy_state = 0;
            deploy_complete = true;
            deploy_action = INITIAL;
          }
          else{
            motor_array[LEFT] = motor_array[LEFT] - 40;
            motor_array[RIGHT] = motor_array[RIGHT] - 40;
          }
          break;
      }
      break;
  }
}*/
