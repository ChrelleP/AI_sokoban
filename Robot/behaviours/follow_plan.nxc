// Follow Plan state function

sub follow_plan(int &motor_array[], bool &cross_event, int &turn_action, bool &turn_complete, char &current_event bool &event_complete)
{
  switch (follow_plan_state) {
    case INITIAL: // IDLE STATE
      switch(current_event){
        case 'L':
          follow_plan_state = STATE1;
          break;
        case 'R':
          follow_plan_state = STATE2;
          break;
        case 'F':
          follow_plan_state = STATE3;
          break;
        case 'B':
          follow_plan_state = STATE4;
          break;
        case 'S':
          follow_plan_state = STATE5;
          break;
        case 'N':
          follow_plan_state = INITIAL;
          break;
        default:
          break;
      }

      TextOut(0,LCD_LINE7, "                                               ");
      NumOut(0,LCD_LINE7, current_event);
      break;
    case STATE1: // TURN LEFT
      if(turn_complete == true){
        follow_plan_state = STATE3;
        turn_action = 0;
        turn_complete = false;
        cross_event = false;
      }
      else{
        turn_action = 1;
      }
      break;
    case STATE2: // TURN RIGHT
      if(turn_complete == true){
        follow_plan_state = STATE3;
        turn_action = 0;
        turn_complete = false;
        cross_event = false;
      }
      else{
        turn_action = 2;
      }
      break;
    case STATE3: // FORWARD
      if(cross_event == true)
      {
        cross_event = false;
        RotateMotor(OUT_AB, -SPEED, 130);
        follow_plan_state = INITIAL;
        event_complete = true;
        current_event = 'N';
      }

      /*switch(forward_state)
      {
        case 0:
          if(cross_event == true){
            cross_event = false;
            motor_on = 20;
            forward_state = 1;
            follow_plan_state = STATE4;
          }
          break;
        case 1:
          if(motor_on == 0){
            forward_state = 0;
            follow_plan_state = STATE2;
          }
          else{
            motor_on = motor_on - 1;
          }
          break;
      }*/
      break;
    case STATE4: // BACKWARDS
      int motor_left = -motor_array[LEFT];
      int motor_right = -motor_array[RIGHT];
      motor_array[LEFT] = motor_left;
      motor_array[RIGHT] = motor_right;
      break;
    case STATE5:
      motor_array[LEFT] = 0;
      motor_array[RIGHT] = 0;
      break;
  }
}
