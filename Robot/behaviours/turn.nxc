// Turn mechanism function

sub turn(int &motor_array[], bool &cross_event, int &turn_action, bool &turn_complete)
{
  switch (turn_action) {
    case INITIAL: // IDLE STATE
      // DO nothing
      break;
    case STATE1: // TURN LEFT
      switch(turn_state)
      {
        case 0: // WAIT FOR CROSS EVENT
          if(cross_event){
            motor_array[RIGHT] = TURN_SPEED;
            motor_array[LEFT] = -TURN_SPEED;
            cross_event = 0;
            turn_state = 1;
          }
          else{
            motor_array[RIGHT] = TURN_SPEED;
            motor_array[LEFT] = -TURN_SPEED;
          }
          break;
        case 1: // WAIT FOR HIGH ENOUGH DIFFERENCE BETWEEN SENSORS
          {
            float difference = abs((Sensor(LEFT_LIGHT) + 7) - Sensor(RIGHT_LIGHT));

            if(difference > 10){
              turn_state = 0;
              cross_event = false;
              turn_action = INITIAL;
              turn_complete = true;
            }
            else{
              motor_array[RIGHT] = TURN_SPEED;
              motor_array[LEFT] = -TURN_SPEED;
            }
          }
          break;
      }
      break;
    case STATE2: // TURN RIGHT
      switch(turn_state)
      {
        case 0: // WAIT FOR CROSS EVENT
          if(cross_event){
            turn_state = 1;
            cross_event = 0;
          }
          else{
            motor_array[RIGHT] = -TURN_SPEED;
            motor_array[LEFT] = TURN_SPEED;
          }
          break;
        case 1: // WAIT FOR HIGH ENOUGH DIFFERENCE BETWEEN SENSORS
          {
            float difference = abs((Sensor(LEFT_LIGHT) + 7) - Sensor(RIGHT_LIGHT));

            if(difference > 10){
              turn_state = 0;
              cross_event = false;
              turn_action = INITIAL;
              turn_complete = true;
            }
            else{
              motor_array[RIGHT] = -TURN_SPEED;
              motor_array[LEFT] = TURN_SPEED;
            }
          }
          break;
      }
      break;
  }
}
