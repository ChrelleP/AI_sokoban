// Sensors and outputs
#define LEFT_LIGHT      IN_1
#define RIGHT_LIGHT     IN_2
#define TOUCH           IN_4
#define FRONT_LIGHT     IN_3
#define WHEEL_LEFT      OUT_A
#define WHEEL_RIGHT     OUT_B
#define LEFT            0
#define RIGHT           1
#define LIGHT           2


// Variables
#define SPEED  95
#define TURN_SPEED 80

// States
int go_forward_state = 0,
    line_following_state = 0,
    cross_detection_state = 0,
    follow_plan_state = 0,
    turn_state = 0,
    sokoban_plan_state = 0,
    deploy_state = 0;
enum { INITIAL, STATE1, STATE2, STATE3, STATE4, STATE5 };

// Registers for line following
float integral      = 0;
float last_error    = 0;
float previous_tick = 0;

// Registers for cross_detection
int rare_sample     = 0;
int sample_number   = 0;
const int max_sample_size  = 10;
float light_average[10];
int upper_thresh = 60;
int lower_thresh = 45;

// Registers for follow Plan
int forward_state = 0;
int motor_on = 0;
int keep = 0;
int slow_down = 0;

// Registers for sokoban Plan
string plan = "FDRRDFLRLFLLDLDRDLFFFFDRRFRFRRDRFFFFFLLDFFFRRFFFFFFDRFLFFFLDFRFFFFFRRDFRFRRDRFFLFRFFFRFFRDLLFFFDRFLFFLDLLLFFDLFRRDLFLFDFFRFFRRFDLLLDLDFFFFRFRFFD";
//MAP 2015 SOLUTION - "FRFFRFFFDLDFFRFRRFFFFDLLLFDLLFLFLLFDLRLRFRLDLFLFLLDRRRFDFLFLDRDLLFFDLLLFDLLFRFRRDLLLDFLFLLDLFRFFFRFRRDLLLFFDLLLFFDRRRDLFFRFFFLRFRRFFFFDLLLFD"
//MAP 2016 SOLUTION - "FDRRDFLRLFLLDLDRDLFFFFDRRFRFRRDRFLRLRFRDRRRFFFFDRFRFRRDFRFRRDRFRFLFFLFDLLLDFFFRRDRRDFLLFFFFDRFLFFLDLLLFFDLLLFDFFRLRRDRRRFDLLLDLDFFFFRFRFFD"
//FIGURE 8 infinite - "RRRRLLLLX"
//PUSHING inifnite - "DRRRDRRRDRRRDRRRDLLLDLLLDLLLDLLLX"
//FORWARD infinite - "FFFFFRRFFFFFRRX"
//---PRIORITIZE---
//FORWARD (R) - "FDRRDFLRLFLLDLDRDLFFFDFFFFLLDFFFRRFFFFDLFRRDLFLDLDRRFRFRRDRRFLFFFLFDRFFDRDFLDRFRFRRDFRFRRDRFFFFRFRFFDLFFRFLRRDRFRFRDLLFFFDRFLFFLDLLLFFDLLLDLD"
//MORE FOWARD (R) - "FDRRDFLRLFLLDLDRDLFFFFDRRFRFRRDRFFFFFLLDFFFRRFFFFFFDRFLFFFLDFRFFFFFRRDFRFRRDRFFLFRFFFRFFRDLLFFFDRFLFFLDLLLFFDLFRRDLFLFDFFRFFRRFDLLLDLDFFFFRFRFFD"
//FORWARD, MOVES OVER PUSHES (R) - "FDRRDFLRLFLLDLDRDLFFFFDRRFRFRRDRFFFFFLLDFFFRRFFFFFFDRFLFFFLDFRFFFFFRRDFRFRRDRFFLFRFFFRFFRDLLFFFDRFLFFLDLLLFFDLLLFDFFRLRRDRRRFDLLLDLDFFFFRFRFFD"
//FORWARD, EVEN MORE MORE MOVES OVER PUSHES (R) - "FDRRDFLRLFLLDLDRDLFFFFDRRFRFRRDRFFFFFLRFRRFFFFFFDRFLFFFLDFRFFFFFRRDFRFRRDRFFLFRFFFRFFRDLLFFFDRFLFFLDLLLFFDLLLFDFLDFFFLFRRDRRRFFDLLLDRFFRFRFFD"
//MOVES OVER PUSHES (R) - "FDRRDFLRLFLLDLDRDLFFFFDRRFRFRRDRFFLRLRRDRRRFFFFDRFRFRRDFRFRRDRFRFLFFLFDLLRFRRDRRDFLLFFFFDRFLFFLDLLLFFDLLLFDFFRFLRRDRRRFFDLLLDLDFFFFRFRFFD"
//EVEN MORE MOVES OVER PUSHES (R) - "FDRRDFLRLFLLDLDRDLFFFFDRRFRFRRDRFFLFRFRDRRRFFFFDRFLFFFLDFRFFFFFRRDFRFRRDRFFLRFFRRFFDLLLFDFRFFRFRFFDFFFLFRLRFRRDRRDFLLFFFFDRFLFFLDLLLFFDLLLDLD"
//EVEN MORE MORE MOVES OVER PUSHES (R) - "FDRRDFLRLFLLDLDRDLFFFFDRRFRFRRDRFFFFFLRFRRFFFFFFDRFLFFFLDFRFFFFFRRDFRFRRDRFLRFLRFFRFFRDLLFFFDRFLFFLDLLLFFDLLLDLDFRDFFRFLRRDRRRFFDLLLDRFFRFRFFD"

int pos = 0;

// Deploy Registers
int motor_ramp = 0;
int wheel_counter = 0;

// Turn register (for speed)
float timer = 0;
float current_timer = 0;

// Actuator registers
int right_last = 0;
int left_last = 0;

// DEBUG
bool debug = false;

// Initialize sensors
sub set_sensors() {
  SetSensorLight(LEFT_LIGHT);
  SetSensorLight(RIGHT_LIGHT);
  SetSensorLight(FRONT_LIGHT);
  SetSensorTouch(TOUCH);

}
